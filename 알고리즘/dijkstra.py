'''
입력
5 11
0 1 3
0 2 5
1 2 2
1 3 6
2 1 1
2 3 4
2 4 6
3 4 2
3 5 3
4 0 3
4 5 6
'''
def dijkstra(s, V):  # 시작정점 s, 마지막 정점 V
    # 방문처리 리스트?
    U = [0] * (V + 1)
    U[s] = 1

    # 먼저 시작 지점과 연결된 노드들의 가중치를 저장
    # 연결되지 않은 노드는 adj[s][v] = INF 이므로 D[v] = INF
    for v in range(V + 1):
        D[v] = adj[s][v]
    # print(D) => [0, 3, 5, 10000, 10000, 10000]
    
    # while len(U) != V:
    for _ in range(V):  # V = 정점개수-1과 같으므로.. 남은 정점개수와 같음
        minV = INF
        w = 0
        for i in range(V + 1):
            # i노드를 아직 방문하지 않았고 "and" i까지 가는 거리 비용이 최솟값보다 작다면
            # 최솟값 노드 w를 i로 바꿔주고, 최솟값도 D[i]로 바꿔준다.
            if U[i] == 0 and minV > D[i]:
                minV = D[i]
                w = i
        U[w] = 1  # 선택된 집합에 포함

        for v in range(V + 1):
            # 정점 v가 w에 인접이면 , 시작정점에서 w를 거쳐 v로 가능 비용과
            if 0 < adj[w][v] < INF:
                # 시작정점에서 v로 가는 기존 비용을 비교 후 선택
                D[v] = min(D[v], D[w] + adj[w][v])
        print(U,D)


INF = 10000
V, E = map(int, input().split())
adj = [[INF] * (V + 1) for _ in range(V + 1)]

for i in range(V + 1):
    # 자기 자신 자리는 0으로~
    adj[i][i] = 0

for _ in range(E):
    u, v, w = map(int, input().split())
    adj[u][v] = w  # 방향성 그래프
'''
adj = [
0번 노드 (1자리에 가중치 3, 2자리에 가중치 5)
         : [0, 3, 5, 10000, 10000, 10000], 
1번 노드 : [10000, 0, 2, 6, 10000, 10000], 
2번 노드 : [10000, 1, 0, 4, 6, 10000], 
3번 노드 : [10000, 10000, 10000, 0, 2, 3], 
4번 노드 : [3, 10000, 10000, 10000, 0, 6], 
5번 노드 : [10000, 10000, 10000, 10000, 10000, 0]
]
'''
# 시작 정점 0에서 각 정점으로 가는 최소 비용을 저장할 리스트
D = [0] * (V + 1)

dijkstra(0, V)

print(D) 
'''
출력 : [0, 3, 5, 9, 11, 12]
'''